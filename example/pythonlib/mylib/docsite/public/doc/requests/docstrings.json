{
  "request": {
    "funcdef": "def request(\n\tmethod,\n\turl,\n\t**kwargs\n)",
    "description": "Constructs and sends a :class:`Request <Request>`.",
    "long_description": null,
    "example": null,
    "params": {
      "method": {
        "description": "method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.",
        "type": null,
        "default": null
      },
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "params": {
        "description": "(optional) Dictionary, list of tuples or bytes to send<br />in the query string for the :class:`Request`.",
        "type": null,
        "default": null
      },
      "data": {
        "description": "(optional) Dictionary, list of tuples, bytes, or file-like<br />object to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "json": {
        "description": "(optional) A JSON serializable Python object to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "headers": {
        "description": "(optional) Dictionary of HTTP Headers to send with the :class:`Request`.",
        "type": null,
        "default": null
      },
      "cookies": {
        "description": "(optional) Dict or CookieJar object to send with the :class:`Request`.",
        "type": null,
        "default": null
      },
      "files": {
        "description": "(optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.<br />``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``<br />or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string<br />defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers<br />to add for the file.",
        "type": null,
        "default": null
      },
      "auth": {
        "description": "(optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.",
        "type": null,
        "default": null
      },
      "timeout": {
        "description": "(optional) How many seconds to wait for the server to send data<br />before giving up, as a float, or a :ref:`(connect timeout, read<br />timeout) <timeouts>` tuple.",
        "type": "float or tuple",
        "default": null
      },
      "allow_redirects": {
        "description": "(optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.",
        "type": "bool",
        "default": null
      },
      "proxies": {
        "description": "(optional) Dictionary mapping protocol to the URL of the proxy.",
        "type": null,
        "default": null
      },
      "verify": {
        "description": "(optional) Either a boolean, in which case it controls whether we verify<br />the server's TLS certificate, or a string, in which case it must be a path<br />to a CA bundle to use. Defaults to ``True``.",
        "type": null,
        "default": null
      },
      "stream": {
        "description": "(optional) if ``False``, the response content will be immediately downloaded.",
        "type": null,
        "default": null
      },
      "cert": {
        "description": "(optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response<br />Usage::<br /><br />  >>> import requests<br />  >>> req = requests.request('GET', 'https://httpbin.org/get')<br />  >>> req<br />  <Response [200]>"
    },
    "extra_examples": [
      {
        "code": "import requests\n\nr = requests.get(\"https://httpbin.org/basic-auth/user/pass\", auth=(\"user\", \"pass\"))\ndata = r.json()\n",
        "is_executable": false
      }
    ]
  },
  "get": {
    "funcdef": "def get(\n\turl,\n\tparams,\n\t**kwargs\n)",
    "description": "Sends a GET request.",
    "long_description": null,
    "example": null,
    "params": {
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "params": {
        "description": "(optional) Dictionary, list of tuples or bytes to send<br />in the query string for the :class:`Request`.",
        "type": null,
        "default": null
      },
      "\\*\\*kwargs": {
        "description": "Optional arguments that ``request`` takes.",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response"
    }
  },
  "options": {
    "funcdef": "def options(\n\turl,\n\t**kwargs\n)",
    "description": "Sends an OPTIONS request.",
    "long_description": null,
    "example": null,
    "params": {
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "\\*\\*kwargs": {
        "description": "Optional arguments that ``request`` takes.",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response"
    }
  },
  "head": {
    "funcdef": "def head(\n\turl,\n\t**kwargs\n)",
    "description": "Sends a HEAD request.",
    "long_description": null,
    "example": null,
    "params": {
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "\\*\\*kwargs": {
        "description": "Optional arguments that ``request`` takes. If<br />`allow_redirects` is not provided, it will be set to `False` (as<br />opposed to the default :meth:`request` behavior).",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response"
    }
  },
  "post": {
    "funcdef": "def post(\n\turl,\n\tdata,\n\tjson,\n\t**kwargs\n)",
    "description": "Sends a POST request.",
    "long_description": null,
    "example": null,
    "params": {
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "data": {
        "description": "(optional) Dictionary, list of tuples, bytes, or file-like<br />object to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "json": {
        "description": "(optional) json data to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "\\*\\*kwargs": {
        "description": "Optional arguments that ``request`` takes.",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response"
    }
  },
  "put": {
    "funcdef": "def put(\n\turl,\n\tdata,\n\t**kwargs\n)",
    "description": "Sends a PUT request.",
    "long_description": null,
    "example": null,
    "params": {
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "data": {
        "description": "(optional) Dictionary, list of tuples, bytes, or file-like<br />object to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "json": {
        "description": "(optional) json data to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "\\*\\*kwargs": {
        "description": "Optional arguments that ``request`` takes.",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response"
    }
  },
  "patch": {
    "funcdef": "def patch(\n\turl,\n\tdata,\n\t**kwargs\n)",
    "description": "Sends a PATCH request.",
    "long_description": null,
    "example": null,
    "params": {
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "data": {
        "description": "(optional) Dictionary, list of tuples, bytes, or file-like<br />object to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "json": {
        "description": "(optional) json data to send in the body of the :class:`Request`.",
        "type": null,
        "default": null
      },
      "\\*\\*kwargs": {
        "description": "Optional arguments that ``request`` takes.",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response"
    }
  },
  "delete": {
    "funcdef": "def delete(\n\turl,\n\t**kwargs\n)",
    "description": "Sends a DELETE request.",
    "long_description": null,
    "example": null,
    "params": {
      "url": {
        "description": "URL for the new :class:`Request` object.",
        "type": null,
        "default": null
      },
      "\\*\\*kwargs": {
        "description": "Optional arguments that ``request`` takes.",
        "type": null,
        "default": null
      }
    },
    "raises": [],
    "returns": {
      "name": null,
      "type": "requests.Response"
    }
  }
}