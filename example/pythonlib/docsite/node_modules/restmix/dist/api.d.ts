import { ApiResponse, OnResponseHook, UseApiParams } from './interfaces';
declare const useApi: (params?: UseApiParams) => {
    csrfToken: () => string | null;
    hasCsrfCookie: () => boolean;
    setCsrfToken: (token: string) => void;
    setCsrfTokenFromCookie: (verbose?: boolean) => boolean;
    addHeader: (key: string, val: string) => void;
    removeHeader: (key: string) => void;
    onResponse: (hook: OnResponseHook) => void;
    get: <T>(uri: string, verbose?: boolean) => Promise<ApiResponse<T>>;
    post: <T_1>(uri: string, payload: Array<any> | Record<string, any> | FormData, multipart?: boolean, verbose?: boolean) => Promise<ApiResponse<T_1>>;
    put: <T_2>(uri: string, payload: Array<any> | Record<string, any>, verbose?: boolean) => Promise<ApiResponse<T_2>>;
    patch: <T_3>(uri: string, payload: Array<any> | Record<string, any>, verbose?: boolean) => Promise<ApiResponse<T_3>>;
    del: <T_4>(uri: string, verbose?: boolean) => Promise<ApiResponse<T_4>>;
};
export { useApi };
