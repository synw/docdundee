import "highlight.js";
import "vuecodit/style.css";
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    py: {
        type: () => {
            load: (pyoPackages?: string[] | undefined, packages?: string[] | undefined, initCode?: string | undefined, transformCode?: string | undefined) => Promise<{
                results: any;
                error: any;
            }>;
            run: (script: string, id?: string | undefined, context?: Record<string, any> | undefined) => Promise<{
                results: any;
                error: any;
            }>;
            installLog: import("nanostores").MapStore<import("usepython/dist/interfaces").PyInstallLog>;
            log: import("nanostores").MapStore<import("usepython/dist/interfaces").PyLog>;
            isExecuting: import("nanostores").ReadableAtom<boolean>;
            isReady: import("nanostores").ReadableAtom<boolean>;
        };
        required: true;
    };
    code: {
        type: StringConstructor;
        required: true;
    };
    controls: {
        type: BooleanConstructor;
        default: boolean;
    };
    output: {
        type: BooleanConstructor;
        default: boolean;
    };
    exception: {
        type: BooleanConstructor;
        default: boolean;
    };
    stdout: {
        type: BooleanConstructor;
        default: boolean;
    };
    stderr: {
        type: BooleanConstructor;
        default: boolean;
    };
    dispatch: {
        type: FunctionConstructor;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "result"[], "result", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    py: {
        type: () => {
            load: (pyoPackages?: string[] | undefined, packages?: string[] | undefined, initCode?: string | undefined, transformCode?: string | undefined) => Promise<{
                results: any;
                error: any;
            }>;
            run: (script: string, id?: string | undefined, context?: Record<string, any> | undefined) => Promise<{
                results: any;
                error: any;
            }>;
            installLog: import("nanostores").MapStore<import("usepython/dist/interfaces").PyInstallLog>;
            log: import("nanostores").MapStore<import("usepython/dist/interfaces").PyLog>;
            isExecuting: import("nanostores").ReadableAtom<boolean>;
            isReady: import("nanostores").ReadableAtom<boolean>;
        };
        required: true;
    };
    code: {
        type: StringConstructor;
        required: true;
    };
    controls: {
        type: BooleanConstructor;
        default: boolean;
    };
    output: {
        type: BooleanConstructor;
        default: boolean;
    };
    exception: {
        type: BooleanConstructor;
        default: boolean;
    };
    stdout: {
        type: BooleanConstructor;
        default: boolean;
    };
    stderr: {
        type: BooleanConstructor;
        default: boolean;
    };
    dispatch: {
        type: FunctionConstructor;
    };
}>> & {
    onResult?: ((...args: any[]) => any) | undefined;
}, {
    output: boolean;
    controls: boolean;
    exception: boolean;
    stdout: boolean;
    stderr: boolean;
}>;
export default _default;
