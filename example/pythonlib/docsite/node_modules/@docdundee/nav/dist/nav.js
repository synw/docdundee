function _routePathAsArray(routePath) {
    const _routePathArray = new Array();
    if (routePath.includes("/")) {
        if (routePath.startsWith("/")) {
            _routePathArray.push(...routePath.split("/").slice(1));
        }
        else {
            _routePathArray.push(...routePath.split("/"));
        }
    }
    else {
        _routePathArray.push(routePath);
    }
    return _routePathArray;
}
const useNav = (docloader, api) => {
    let setReady;
    let onReady = new Promise((r) => setReady = r);
    let _tree = {};
    const _loadNav = async () => {
        let url = `/doc/nav.json`;
        const res = await api.get(url);
        if (res.ok) {
            return res.data;
        }
        throw new Error(`${res.status}: ${res.data}`);
    };
    const init = async () => {
        _tree = await _loadNav();
        setReady(true);
    };
    const _findNodeFromRoutePathArray = (_routePathArray) => {
        let node = _tree;
        let children = _tree.children;
        // console.log("Route", routePath, children);
        let i = 1;
        for (const segment of _routePathArray) {
            if (children) {
                const newnode = children?.find((c) => c.name == segment);
                if (!newnode) {
                    return node;
                    //throw new Error(`Route path error: no ${segment} segment`)
                }
                // console.log("SET NODE", newnode)
                node = newnode;
                children = node?.children;
            }
            else {
                if (i == _routePathArray.length) {
                    return node;
                }
                throw new Error(`Route path error: children for ${segment} not found`);
            }
            ++i;
        }
        return node;
    };
    const findNode = (routePath) => _findNodeFromRoutePathArray(_routePathAsArray(routePath));
    const loadFromRoutePath = async (routePath) => {
        await onReady;
        const _routePathArray = _routePathAsArray(routePath);
        const node = _findNodeFromRoutePathArray(_routePathArray);
        const lastSegment = _routePathArray.slice(-1)[0];
        const _routePathWithoutLastSegment = _routePathArray.slice(0, -1).join("/");
        if (lastSegment == node.name) {
            // this is a directory url, fetch the markdown index
            const indexMd = await docloader.loadMarkdown(routePath + "/index.md");
            return {
                name: lastSegment,
                hasMarkdown: true,
                hasDocstring: false,
                markdown: indexMd,
                docstring: {},
            };
        }
        let hasMarkdown = false;
        let hasDocstring = false;
        let markdown = "";
        if (node.content.length > 0) {
            let mdNode = node.content.find(n => n.name == lastSegment);
            //let filename = name + ".md";
            if (mdNode) {
                hasMarkdown = true;
                markdown = await docloader.loadMarkdown(mdNode.docpath);
            }
        }
        let docstring = {};
        if (node.docstrings.length > 0) {
            const _docstring = await docloader.loadDocstrings(node.docpath);
            const _ds = _docstring[lastSegment];
            if (_ds) {
                hasDocstring = true;
                docstring = _ds;
            }
        }
        return {
            name: lastSegment,
            hasMarkdown: hasMarkdown,
            hasDocstring: hasDocstring,
            markdown: markdown,
            docstring: docstring,
        };
    };
    return {
        get tree() { return _tree; },
        init,
        loadFromRoutePath,
        findNode,
    };
};
export { useNav };
//# sourceMappingURL=nav.js.map